//01_Introduction_2.cpp

/*
	좋은 소프트웨어 구조란 ?

	- 뭔가를 고쳐야 할 때 그럴 줄 알았다는 듯이 코드가 준비되어 있어야 함
	- 함수 몇 개만 호출하면 원하는 작업이 가능해야 함
*/

/*
	코드를 고쳐야 한다면 ?

	- 코드를 먼저 이해해야 함
	- 고치려는 부분의 코드를 머릿속에 넣어야 함
	- 이 상황에 디커플링된 코드는 이해를 도움
	- 작업에 들어가기 전에 알아야 할 코드의 양을 줄이는 것

	#프로그래머의 업무

	업무 할당 -> 코드 파악 -> 문제 해결 코드 작성 -> 코드 정리
*/

/*
	코드를 유연하게 만드는 패턴들
	- 가상 함수, 인터페이스, 포인터, 메시지

	-> 런타임에 비용을 요구함
*/

/*
	개발기간과 유지보수가 용이한 코드 사이에서의 절충이 필요
*/